name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]  # develop 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "develop" ]  # develop 브랜치로 PR 요청 시 트리거

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      ## 코드 체크아웃
      - uses: actions/checkout@v4

      ## JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      ## Gradle 캐싱 (빌드 속도 향상)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## Gradlew 실행 권한 부여
      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      ## Docker 이미지 빌드 및 푸시
      - name: docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}  # DockerHub 로그인
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .  # Docker 이미지 빌드
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test:latest  # Docker 이미지 푸시

      ## EC2 서버에 배포
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 접근을 위한 SSH 키
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스 호스트
          username: ubuntu  # EC2 사용자 이름
          port: 22
          script: |
            docker rm -f $(docker ps -qa)  # 기존 컨테이너 삭제
            docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test  # 최신 이미지 가져오기
            docker-compose up -d  # 새로운 컨테이너 실행
            docker image prune -f  # 사용되지 않는 이미지 정리
